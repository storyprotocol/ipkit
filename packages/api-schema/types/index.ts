// üö® This file is autogenerated by openapi-typescript. Do not edit manually.
// generated at 2025-03-26T13:10:00.800Z

export interface paths {
  "/api/v3/assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List IPAssets
     * @description Retrieve a paginated, filtered list of IPAssets
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber, descendantCount or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAssetsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/assets/edges": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List IP Edges
     * @description Retrieve a paginated, filtered list of IP Edges
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetEdgeRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPAssetEdgeResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/assets/{assetId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an IPAsset
     * @description Retrieve an IPAsset
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Asset ID */
          assetId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAssetResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/assets/{assetId}/metadata": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get metadata for an IPAsset
     * @description Retrieve metadata for an IPAsset
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Asset ID */
          assetId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IpAssetMetadata"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/collections": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Collections
     * @description Retrieve a paginated, filtered list of Collections
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber, assetCount, licensesCount or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionsRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/collections/{collectionId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an Collection
     * @description Retrieve a Collection
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Collection ID */
          collectionId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/detailed-ip-license-terms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List detailed ip license term
     * @description Retrieve detailed IP License Terms associated with list of IP ID
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DetailedIPLicenseTermsRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTermsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/disputes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Disputes
     * @description Retrieve a paginated, filtered list of Disputes
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DisputeRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DisputesResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/disputes/{disputeId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a Dispute
     * @description Retrieve a Dispute
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Dispute ID */
          disputeId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DisputeResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/ip_group_edges": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List a IPGroup's edges
     * @description Retrieve an IPGroup edges
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber, groupId or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/ip-groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List IP groups
     * @description Retrieve an IPGroup
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be groupId or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/ip/terms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List IPLicenseTerms
     * @description Retrieve a paginated, filtered list of IPLicenseTerms
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPLicenseTermsRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPLicenseTermsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/ip/terms/{ipId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get IP License Terms for an IP
     * @description Retrieve IP License Terms associated with an IP ID
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description IP ID */
          ipId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPLicenseTermsResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/mintingfees": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List LicenseMintingFeePays
     * @description Retrieve a paginated, filtered list of LicenseMintingFeePaids
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseMintingFeePaidRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaidsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/mintingfees/{licenseMintingFeePaidId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a LicenseMintingFeePay
     * @description Retrieve a LicenseMintingFeePay
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description LicenseMintingFeePay ID */
          licenseMintingFeePaidId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaidResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List LicenseTemplates
     * @description Retrieve a paginated, filtered list of LicenseTemplates
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTemplatesRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplatesResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/templates/{licenseTemplateId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a LicenseTemplate
     * @description Retrieve a LicenseTemplate
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description LicenseTemplate ID */
          licenseTemplateId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplateResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/terms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List LicenseTerms
     * @description Retrieve a paginated, filtered list of LicenseTerms
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTermsRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTermsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/terms/default": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get default license term
     * @description Retrieve default license term
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTermsDefaultResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/terms/{licenseTermId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a LicenseTerm
     * @description Retrieve a LicenseTerm
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description LicenseTerm ID */
          licenseTermId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTermResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List LicenseTokens
     * @description Retrieve a paginated, filtered list of LicenseTokens
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTokenRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTokensResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/licenses/tokens/{licenseTokenId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an LicenseToken
     * @description Retrieve a LicenseToken
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description License Token ID */
          licenseTokenId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTokenResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/modules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Modules
     * @description Retrieve a paginated, filtered list of Modules
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.ModuleRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.ModulesResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/modules/{moduleId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a Module
     * @description Retrieve a Module
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Module ID */
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.ModuleResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/permissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Permissions
     * @description Retrieve a paginated, filtered list of Permissions
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.PermissionRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.PermissionsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/permissions/{permissionId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a Permission
     * @description Retrieve a Permission
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Permission ID */
          permissionId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.PermissionResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/royalties/payments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List RoyaltyPays
     * @description Retrieve a paginated, filtered list of RoyaltyPays
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.RoyaltyPayRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPaysResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/royalties/payments/{royaltyPayId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a RoyaltyPay
     * @description Retrieve a RoyaltyPay
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description RoyaltyPay ID */
          royaltyPayId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPayResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/transactions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Transactions
     * @description Retrieve a paginated, filtered list of Transactions
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber, resourceType or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.TransactionRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.TransactionsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/transactions/latest": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List Latest Transactions
     * @description Retrieve a paginated, filtered list of Latest Transactions
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description Query Parameters must be wrapped in options object (though it can be left empty) ‚ùóÔ∏è üëÄ. OrderBy must be blockNumber, resourceType or empty. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.TransactionRequestBody"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.TransactionsResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/transactions/{trxId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a Transaction
     * @description Retrieve a Transaction
     */
    get: {
      parameters: {
        query?: never;
        header: {
          /** @description API Key */
          "X-Api-Key": string;
          /** @description Chain Destination */
          "X-Chain": string;
        };
        path: {
          /** @description Transaction ID */
          trxId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.TransactionResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    "big.Int": Record<string, never>;
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Collection": {
      assetCount?: string;
      blockNumber?: string;
      blockTimestamp?: string;
      cancelledDisputeCount?: string;
      id?: string;
      judgedDisputeCount?: string;
      licensesCount?: string;
      raisedDisputeCount?: string;
      resolvedDisputeCount?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumberLte?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Collection"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionsRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.CollectionsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Collection"][];
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DetailedIPLicenseTermsQueryOptions": {
      where?: {
        ipIds?: string[];
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DetailedIPLicenseTermsRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DetailedIPLicenseTermsQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Dispute": {
      arbitrationPolicy?: string;
      blockNumber?: components["schemas"]["big.Int"];
      blockTimestamp?: components["schemas"]["big.Int"];
      currentTag?: string;
      data?: string;
      deletedAt?: components["schemas"]["big.Int"];
      disputeTimestamp?: components["schemas"]["big.Int"];
      evidenceHash?: string;
      id?: components["schemas"]["big.Int"];
      initiator?: string;
      logIndex?: components["schemas"]["big.Int"];
      status?: string;
      targetIpId?: string;
      targetTag?: string;
      transactionHash?: string;
      umaLink?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DisputeResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Dispute"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.DisputesResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Dispute"][];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPAssetEdgeResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IpAssetEdge"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPLicenseTerm": {
      blockNumber?: string;
      blockTime?: string;
      disabled?: boolean;
      id?: string;
      ipId?: string;
      licenseTemplate?: string;
      licenseTermsId?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPLicenseTermsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IPLicenseTerm"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IpAssetEdge": {
      blockNumber?: string;
      blockTime?: string;
      ipId?: string;
      licenseTemplate?: string;
      licenseTermsId?: string;
      licenseTokenId?: string;
      parentIpId?: string;
      transactionHash?: string;
      transactionIndex?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.IpAssetMetadata": {
      id?: string;
      metadataHash?: string;
      metadataJson?: unknown;
      metadataUri?: string;
      nftMetadataHash?: string;
      nftTokenUri?: string;
      registrationDate?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaid": {
      amount?: string;
      blockNumber?: string;
      blockTimestamp?: string;
      id?: string;
      payer?: string;
      receiverIpId?: string;
      token?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaidResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaid"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaidsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseMintingFeePaid"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplate": {
      blockNumber?: string;
      blockTime?: string;
      id?: string;
      metadataUri?: string;
      name?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplateResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplate"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplatesResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplate"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTerm": {
      blockNumber?: string;
      blockTime?: string;
      id?: string;
      licenseTemplate?: string;
      licenseTerms?: {
        [key: string]: unknown;
      }[];
      terms?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Term"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTermResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTerm"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTermsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTerm"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseToken": {
      blockNumber?: string;
      blockTime?: string;
      burntAt?: string;
      id?: string;
      licenseTemplate?: string;
      licenseTermsId?: string;
      licensorIpId?: string;
      owner?: string;
      transferable?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTokenResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseToken"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTokensResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseToken"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Module": {
      blockNumber?: string;
      blockTimestamp?: string;
      deletedAt?: string;
      id?: string;
      module?: string;
      moduleType?: string;
      moduleTypeInterfaceId?: string;
      name?: string;
      transactionHash?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.ModuleResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Module"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.ModulesResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Module"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Permission": {
      blockNumber?: string;
      blockTimestamp?: string;
      func?: string;
      id?: string;
      permission?: string;
      signer?: string;
      to?: string;
      uuid?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.PermissionResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Permission"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.PermissionsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Permission"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPay": {
      amount?: string;
      blockNumber?: string;
      blockTimestamp?: string;
      id?: string;
      payerIpId?: string;
      receiverIpId?: string;
      sender?: string;
      token?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPayResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPay"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPaysResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.RoyaltyPay"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Term": {
      commercialAttribution?: boolean;
      commercialRevCeiling?: number;
      commercialRevShare?: number;
      commercialUse?: boolean;
      commercializerChecker?: string;
      commercializerCheckerData?: string;
      currency?: string;
      defaultMintingFee?: number;
      derivativeRevCeiling?: number;
      derivativesAllowed?: boolean;
      derivativesApproval?: boolean;
      derivativesAttribution?: boolean;
      derivativesReciprocal?: boolean;
      expiration?: number;
      royaltyPolicy?: string;
      transferable?: boolean;
      uri?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Transaction": {
      actionType?: string;
      blockNumber?: string;
      blockTimestamp?: string;
      createdAt?: string;
      id?: string;
      initiator?: string;
      ipId?: string;
      logIndex?: string;
      resourceId?: string;
      resourceType?: string;
      transactionIndex?: string;
      txHash?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.TransactionResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Transaction"][];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.TransactionsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Transaction"][];
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTerms": {
      disabled?: boolean;
      id?: string;
      ipId?: string;
      licenseTemplate?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.LicenseTemplate"];
      licenseTemplateId?: string;
      terms?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv1.Term"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTermsDefaultResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTerms"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTermsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DetailedTerms"][];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DisputeQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        initiator?: string;
        targetIpId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DisputeRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.DisputeQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroup": {
      group_id?: string;
      ip_count?: number;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdge": {
      block_number?: string;
      block_time?: string;
      group_id?: string;
      ip_id?: string;
      transaction_hash?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesQueryOptions": {
      ipAssetIds?: string[];
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      tokenContractIds?: string[];
      tokenIds?: string[];
      where?: {
        blockNumber?: string;
        groupId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdgesResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupEdge"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsQueryOptions": {
      ipAssetIds?: string[];
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      tokenContractIds?: string[];
      tokenIds?: string[];
      where?: {
        groupId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroupsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPGroup"][];
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPLicenseTermsQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        ipId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPLicenseTermsRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IPLicenseTermsQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetEdgeQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        ipId?: string;
        licenseTermsId?: string;
        licenseTokenId?: string;
        parentIpId?: string;
        transactionHash?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetEdgeRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetEdgeQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetQueryOptions": {
      ipAssetIds?: string[];
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      tokenContractIds?: string[];
      tokenIds?: string[];
      where?: {
        blockNumber?: string;
        blockNumberGte?: string;
        blockNumberLte?: string;
        id?: string;
        ipId?: string;
        tokenContract?: string;
        tokenId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.IpAssetQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseMintingFeePaidQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        receiverIpId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseMintingFeePaidRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseMintingFeePaidQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTemplatesQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTemplatesRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTemplatesQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTermsQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTermsRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTermsQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTokenQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        licenseTermsId?: string;
        licensorIpId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTokenRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.LicenseTokenQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.ModuleQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.ModuleRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.ModuleQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.PermissionQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        ipAccount?: string;
        ipAccountOwner?: string;
        to?: string;
        uuid?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.PermissionRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.PermissionQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.RoyaltyPayQueryOptions": {
      orderBy?: string;
      orderDirection?: string;
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        payerIpId?: string;
        receiverIpId?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.RoyaltyPayRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.RoyaltyPayQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.TransactionRequestBody": {
      options?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.TrxQueryOptions"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv2.TrxQueryOptions": {
      /** @enum {string} */
      orderBy?: "id" | "blockNumber" | "ipId" | "resourceType";
      /** @enum {string} */
      orderDirection?: "asc" | "desc";
      pagination?: {
        after?: string;
        before?: string;
        limit?: number;
      };
      where?: {
        blockNumber?: string;
        id?: string;
        ipId?: string;
        resourceType?: string;
        transactionHash?: string;
      };
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAsset": {
      ancestorCount?: number;
      blockNumber?: string;
      blockTimestamp?: string;
      childrenCount?: number;
      descendantCount?: number;
      id?: string;
      ipId?: string;
      isGroup?: boolean;
      latestArbitrationPolicy?: string;
      nftMetadata?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.NftMetadata"];
      parentCount?: number;
      rootCount?: number;
      rootIpIds?: string[];
      transactionHash?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAssetResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAsset"];
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAssetsResponse": {
      data?: components["schemas"]["github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.IPAsset"][];
      hasNextPage?: boolean;
      hasPreviousPage?: boolean;
      next?: string;
      prev?: string;
    };
    "github_com_storyprotocol_protocol-api_api_internal_models_protocolv3.NftMetadata": {
      chainId?: string;
      imageUrl?: string;
      name?: string;
      tokenContract?: string;
      tokenId?: string;
      tokenUri?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
